{"version":3,"sources":["dummy/tests/acceptance/a-resolver-test.js","dummy/tests/acceptance/loading-substate-test.js","dummy/tests/acceptance/query-params-test.js","dummy/tests/ember-sinon-qunit/test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/skip-if-phantom.js","dummy/tests/helpers/start-app.js","dummy/tests/integration/components/my-component-test.js","dummy/tests/test-helper.js","dummy/tests/unit/services/lazy-loader-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('dummy/tests/acceptance/a-resolver-test', ['exports', 'dummy/tests/helpers/skip-if-phantom', 'dummy/tests/helpers/module-for-acceptance'], function (exports, _dummyTestsHelpersSkipIfPhantom, _dummyTestsHelpersModuleForAcceptance) {\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | resolver');\n\n  (0, _dummyTestsHelpersSkipIfPhantom['default'])('Can resolve routes from the boot app and packages', function (assert) {\n    var _this = this;\n\n    assert.ok(this.application.__container__.lookup('route:application') instanceof require('dummy/routes/application')['default'], 'assert.ok(this.application.__container__.lookup(\\'route:application\\') instanceof\\n  require(\\'dummy/routes/application\\').default)');\n\n    assert.notOk(this.application.__container__.lookup('route:package1'), 'assert.notOk(\\n  this.application.__container__.lookup(\\'route:package1\\'))');\n    visit('package1');\n    andThen(function () {\n      var package1 = _this.application.__container__.lookup('route:package1');\n      var requiredPackage1 = require('package1/routes/package1')['default'];\n      assert.ok(package1 instanceof requiredPackage1, 'assert.ok(package1 instanceof requiredPackage1)');\n    });\n    return visit('/'); // reset this so refreshing the browser starts at the root\n  });\n});\n// NOTE: this file was renamed to a-resolver-test to make sure it’s loaded before other acceptance test.\n// This is unfortunate an unnecessary likely it’s the symptom of a larger issue\n\n/* global require */","define('dummy/tests/acceptance/loading-substate-test', ['exports', 'ember-qunit', 'dummy/tests/helpers/module-for-acceptance', 'dummy/components/loading-for-test'], function (exports, _emberQunit, _dummyTestsHelpersModuleForAcceptance, _dummyComponentsLoadingForTest) {\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | loading-substate');\n\n  (0, _emberQunit.test)('loading-substate renders while beforeModel promise resolves', function (assert) {\n    visit('/');\n    visit('slow');\n    andThen(function () {\n      assert.ok(_dummyComponentsLoadingForTest.StateForTest.hasRendered, 'assert.ok(StateForTest.hasRendered)');\n      assert.equal(1, find('.slow').length, 'assert.equal(1, find(\\'.slow\\').length)');\n    });\n    return visit('/'); // reset this so refreshing the browser starts at the root\n  });\n});","define('dummy/tests/acceptance/query-params-test', ['exports', 'dummy/tests/helpers/skip-if-phantom', 'dummy/tests/helpers/module-for-acceptance'], function (exports, _dummyTestsHelpersSkipIfPhantom, _dummyTestsHelpersModuleForAcceptance) {\n\n  (0, _dummyTestsHelpersModuleForAcceptance['default'])('Acceptance | query-params');\n\n  (0, _dummyTestsHelpersSkipIfPhantom['default'])('Query params are not stored in cache for bundles that are not yet loaded', function (assert) {\n    visit('/');\n    visit('link-target');\n    visit('link-target');\n    visit('link-source');\n    visit('link-target');\n    visit('link-source');\n    andThen(function () {\n      return assert.equal(find('.link-source a').attr('href'), '/link-target?page=2&sort=DESC', 'assert.equal(find(\\'.link-source a\\').attr(\\'href\\'), \\'/link-target?page=2&sort=DESC\\')');\n    });\n    return visit('/'); // reset this so refreshing the browser starts at the root\n  });\n});","define('dummy/tests/ember-sinon-qunit/test', ['exports', 'ember', 'sinon', 'qunit', 'ember-qunit'], function (exports, _ember, _sinon, _qunit, _emberQunit) {\n  exports['default'] = test;\n\n  _sinon['default'].expectation.fail = _sinon['default'].assert.fail = function (msg) {\n    _qunit['default'].ok(false, msg);\n  };\n\n  _sinon['default'].assert.pass = function (assertion) {\n    _qunit['default'].ok(true, assertion);\n  };\n\n  _sinon['default'].config = {\n    injectIntoThis: false,\n    injectInto: null,\n    properties: ['spy', 'stub', 'mock', 'sandbox'],\n    useFakeTimers: false,\n    useFakeServer: false\n  };\n\n  function test(testName, callback) {\n    function sinonWrapper() {\n      var context = this;\n      if (_ember['default'].isBlank(context)) {\n        context = {};\n      }\n      _sinon['default'].config.injectInto = context;\n\n      return _sinon['default'].test(callback).apply(context, arguments);\n    }\n\n    return (0, _emberQunit.test)(testName, sinonWrapper);\n  }\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _dummyTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/skip-if-phantom', ['exports', 'qunit'], function (exports, _qunit) {\n\n  var isPhantom = !!window._phantom;\n  exports['default'] = isPhantom ? _qunit.skip : _qunit.test;\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/integration/components/my-component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('my-component', 'Integration | Component | my component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@1.13.13',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'my-component', ['loc', [null, [1, 0], [1, 16]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '', 'assert.equal(this.$().text().trim(), \\'\\')');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@1.13.13',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@1.13.13',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'my-component', [], [], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text', 'assert.equal(this.$().text().trim(), \\'template block text\\')');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/unit/services/lazy-loader-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:lazy-loader', 'Unit | Service | lazy loader');\n\n  (0, _emberQunit.test)('gets the bundle for a particular URL basedon the configuration', function (assert) {\n    var service = this.subject();\n    var actualBundle = service.getBundleForUrl('/package2');\n\n    assert.ok(actualBundle, 'assert.ok(actualBundle)');\n    assert.equal(actualBundle.name, 'package2', 'assert.equal(actualBundle.name, \\'package2\\')');\n    assert.deepEqual(actualBundle.packages, ['package2'], 'assert.deepEqual(actualBundle.packages, [\\'package2\\'])');\n  });\n\n  (0, _emberQunit.test)('loadBundleForUrl evaluates the loaded code for external packages', function (assert) {\n    var service = this.subject();\n    assert.notOk(service.isBundleLoaded('package2'), 'assert.notOk(service.isBundleLoaded(\\'package2\\'))');\n    // Normally this would be a separate test, but we don't have an easy way to \"unload\" code in the browser\n    assert.notOk(require._eak_seen['package2/routes/package2'], 'assert.notOk(\\n  require._eak_seen[\\'package2/routes/package2\\'])');\n\n    return service.loadBundleForUrl('/package2').then(function () {\n      assert.ok(service.isBundleLoaded('package2'), 'assert.ok(service.isBundleLoaded(\\'package2\\'))');\n      assert.ok(require._eak_seen['package2/routes/package2'], 'assert.ok(require._eak_seen[\\'package2/routes/package2\\'])');\n\n      // normally this would be a separate test, but we can't onload JS\n      // loadBundleForUrl doesn't do a second request.\n      return service.loadBundleForUrl('/package2').then(function () {\n        // TODO: assert there was a single request\n      });\n    });\n  });\n\n  (0, _emberQunit.test)('_loadAssets throws if the bundle.urls dont have any of the valid extensions', function (assert) {\n    return this.subject()._loadAssets({ name: 'my-bundle', urls: ['invalidextensions.exe'] }).then(function () {\n      assert.ok(false, 'promise should not be fulfilled');\n    })['catch'](function (error) {\n      assert.ok(error.match(/for bundle my-bundle/), 'assert.ok(error.match(/for bundle my-bundle/))');\n    });\n  });\n});\n/* global require */","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChtCA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}